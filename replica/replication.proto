// Definicoes de mensagens e servico para replicacao via gRPC
// As mensagens sao simples para facilitar o entendimento.

syntax = "proto3";
package replication;

// Requisicao contendo apenas a chave da operacao
message KeyRequest {
  string key = 1;
  int64 timestamp = 2;
  string node_id = 3;
  string op_id = 4;
  VersionVector vector = 5;
  string hinted_for = 6;
}

// Estrutura para enviar chave e valor de uma escrita
message KeyValue {
  string key = 1;
  string value = 2;
  int64 timestamp = 3;
  string node_id = 4;
  string op_id = 5;
  VersionVector vector = 6;
  string hinted_for = 7;
}

// Resposta que devolve um valor, vazio caso nao encontrado
// Representa um valor versionado
message VersionedValue {
  string value = 1;
  int64 timestamp = 2;
  VersionVector vector = 3;
}

// Resposta que devolve todos os valores encontrados
message ValueResponse {
  repeated VersionedValue values = 1;
}

// Request for a range scan within a partition
message RangeRequest {
  string partition_key = 1;
  string start_ck = 2;
  string end_ck = 3;
}

// Item returned when scanning a range
message RangeItem {
  string clustering_key = 1;
  string value = 2;
  int64 timestamp = 3;
  VersionVector vector = 4;
}

// Response with ordered items for a range scan
message RangeResponse {
  repeated RangeItem items = 1;
}

// Mensagem vazia usada em operacoes sem retorno
message Empty {}

// Mensagem simples para o mecanismo de heartbeat
message Heartbeat {
  string node_id = 1;
}

// Vetor de versões enviado ao requisitar atualizações
message VersionVector {
  map<string, int64> items = 1;
}

// Mapear id da partição para o node owner
message PartitionMap {
  map<int32, string> items = 1;
}

// Node in a Merkle tree
message MerkleNodeMsg {
  string key = 1;
  string hash = 2;
  MerkleNodeMsg left = 3;
  MerkleNodeMsg right = 4;
}

// Tree for a database segment
message SegmentTree {
  string segment = 1;
  MerkleNodeMsg root = 2;
}

// Representa uma operação pendente de replicação
message Operation {
  string key = 1;
  string value = 2;
  int64 timestamp = 3;
  string node_id = 4;
  string op_id = 5;
  bool delete = 6;
  VersionVector vector = 7;
}

// Requisição para anti-entropy permitindo enviar várias operações
message FetchRequest {
  VersionVector vector = 1;
  repeated Operation ops = 2;
  map<string, string> segment_hashes = 3;
  repeated SegmentTree trees = 4;
}

// Lista de operações para sincronização
message FetchResponse {
  repeated Operation ops = 1;
  map<string, string> segment_hashes = 2;
}

// Servico disponibilizado por cada seguidor
service Replica {
  rpc Put(KeyValue) returns (Empty);
  rpc Delete(KeyRequest) returns (Empty);
  rpc Get(KeyRequest) returns (ValueResponse);
  rpc ScanRange(RangeRequest) returns (RangeResponse);
  rpc FetchUpdates(FetchRequest) returns (FetchResponse);
  rpc UpdatePartitionMap(PartitionMap) returns (Empty);
}

// Servico dedicado para heartbeat
service HeartbeatService {
  rpc Ping(Heartbeat) returns (Empty);
}
