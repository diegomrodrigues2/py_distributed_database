# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

from replica import replication_pb2 as replica_dot_replication__pb2

GRPC_GENERATED_VERSION = '1.73.1'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in replica/replication_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class ReplicaStub(object):
    """Servico disponibilizado por cada seguidor
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Put = channel.unary_unary(
                '/replication.Replica/Put',
                request_serializer=replica_dot_replication__pb2.KeyValue.SerializeToString,
                response_deserializer=replica_dot_replication__pb2.Empty.FromString,
                _registered_method=True)
        self.Delete = channel.unary_unary(
                '/replication.Replica/Delete',
                request_serializer=replica_dot_replication__pb2.KeyRequest.SerializeToString,
                response_deserializer=replica_dot_replication__pb2.Empty.FromString,
                _registered_method=True)
        self.Get = channel.unary_unary(
                '/replication.Replica/Get',
                request_serializer=replica_dot_replication__pb2.KeyRequest.SerializeToString,
                response_deserializer=replica_dot_replication__pb2.ValueResponse.FromString,
                _registered_method=True)
        self.BeginTransaction = channel.unary_unary(
                '/replication.Replica/BeginTransaction',
                request_serializer=replica_dot_replication__pb2.Empty.SerializeToString,
                response_deserializer=replica_dot_replication__pb2.TransactionId.FromString,
                _registered_method=True)
        self.CommitTransaction = channel.unary_unary(
                '/replication.Replica/CommitTransaction',
                request_serializer=replica_dot_replication__pb2.TransactionControl.SerializeToString,
                response_deserializer=replica_dot_replication__pb2.Empty.FromString,
                _registered_method=True)
        self.AbortTransaction = channel.unary_unary(
                '/replication.Replica/AbortTransaction',
                request_serializer=replica_dot_replication__pb2.TransactionControl.SerializeToString,
                response_deserializer=replica_dot_replication__pb2.Empty.FromString,
                _registered_method=True)
        self.ScanRange = channel.unary_unary(
                '/replication.Replica/ScanRange',
                request_serializer=replica_dot_replication__pb2.RangeRequest.SerializeToString,
                response_deserializer=replica_dot_replication__pb2.RangeResponse.FromString,
                _registered_method=True)
        self.FetchUpdates = channel.unary_unary(
                '/replication.Replica/FetchUpdates',
                request_serializer=replica_dot_replication__pb2.FetchRequest.SerializeToString,
                response_deserializer=replica_dot_replication__pb2.FetchResponse.FromString,
                _registered_method=True)
        self.UpdatePartitionMap = channel.unary_unary(
                '/replication.Replica/UpdatePartitionMap',
                request_serializer=replica_dot_replication__pb2.PartitionMap.SerializeToString,
                response_deserializer=replica_dot_replication__pb2.Empty.FromString,
                _registered_method=True)
        self.UpdateHashRing = channel.unary_unary(
                '/replication.Replica/UpdateHashRing',
                request_serializer=replica_dot_replication__pb2.HashRing.SerializeToString,
                response_deserializer=replica_dot_replication__pb2.Empty.FromString,
                _registered_method=True)
        self.ListByIndex = channel.unary_unary(
                '/replication.Replica/ListByIndex',
                request_serializer=replica_dot_replication__pb2.IndexQuery.SerializeToString,
                response_deserializer=replica_dot_replication__pb2.KeyList.FromString,
                _registered_method=True)
        self.GetNodeInfo = channel.unary_unary(
                '/replication.Replica/GetNodeInfo',
                request_serializer=replica_dot_replication__pb2.NodeInfoRequest.SerializeToString,
                response_deserializer=replica_dot_replication__pb2.NodeInfoResponse.FromString,
                _registered_method=True)
        self.GetReplicationStatus = channel.unary_unary(
                '/replication.Replica/GetReplicationStatus',
                request_serializer=replica_dot_replication__pb2.NodeInfoRequest.SerializeToString,
                response_deserializer=replica_dot_replication__pb2.ReplicationStatusResponse.FromString,
                _registered_method=True)
        self.GetWalEntries = channel.unary_unary(
                '/replication.Replica/GetWalEntries',
                request_serializer=replica_dot_replication__pb2.NodeInfoRequest.SerializeToString,
                response_deserializer=replica_dot_replication__pb2.WalEntriesResponse.FromString,
                _registered_method=True)
        self.GetMemtableEntries = channel.unary_unary(
                '/replication.Replica/GetMemtableEntries',
                request_serializer=replica_dot_replication__pb2.NodeInfoRequest.SerializeToString,
                response_deserializer=replica_dot_replication__pb2.StorageEntriesResponse.FromString,
                _registered_method=True)
        self.GetSSTables = channel.unary_unary(
                '/replication.Replica/GetSSTables',
                request_serializer=replica_dot_replication__pb2.NodeInfoRequest.SerializeToString,
                response_deserializer=replica_dot_replication__pb2.SSTableInfoResponse.FromString,
                _registered_method=True)
        self.GetSSTableContent = channel.unary_unary(
                '/replication.Replica/GetSSTableContent',
                request_serializer=replica_dot_replication__pb2.SSTableContentRequest.SerializeToString,
                response_deserializer=replica_dot_replication__pb2.StorageEntriesResponse.FromString,
                _registered_method=True)


class ReplicaServicer(object):
    """Servico disponibilizado por cada seguidor
    """

    def Put(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Delete(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Get(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def BeginTransaction(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CommitTransaction(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def AbortTransaction(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ScanRange(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def FetchUpdates(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpdatePartitionMap(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpdateHashRing(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListByIndex(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetNodeInfo(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetReplicationStatus(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetWalEntries(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetMemtableEntries(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetSSTables(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetSSTableContent(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ReplicaServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Put': grpc.unary_unary_rpc_method_handler(
                    servicer.Put,
                    request_deserializer=replica_dot_replication__pb2.KeyValue.FromString,
                    response_serializer=replica_dot_replication__pb2.Empty.SerializeToString,
            ),
            'Delete': grpc.unary_unary_rpc_method_handler(
                    servicer.Delete,
                    request_deserializer=replica_dot_replication__pb2.KeyRequest.FromString,
                    response_serializer=replica_dot_replication__pb2.Empty.SerializeToString,
            ),
            'Get': grpc.unary_unary_rpc_method_handler(
                    servicer.Get,
                    request_deserializer=replica_dot_replication__pb2.KeyRequest.FromString,
                    response_serializer=replica_dot_replication__pb2.ValueResponse.SerializeToString,
            ),
            'BeginTransaction': grpc.unary_unary_rpc_method_handler(
                    servicer.BeginTransaction,
                    request_deserializer=replica_dot_replication__pb2.Empty.FromString,
                    response_serializer=replica_dot_replication__pb2.TransactionId.SerializeToString,
            ),
            'CommitTransaction': grpc.unary_unary_rpc_method_handler(
                    servicer.CommitTransaction,
                    request_deserializer=replica_dot_replication__pb2.TransactionControl.FromString,
                    response_serializer=replica_dot_replication__pb2.Empty.SerializeToString,
            ),
            'AbortTransaction': grpc.unary_unary_rpc_method_handler(
                    servicer.AbortTransaction,
                    request_deserializer=replica_dot_replication__pb2.TransactionControl.FromString,
                    response_serializer=replica_dot_replication__pb2.Empty.SerializeToString,
            ),
            'ScanRange': grpc.unary_unary_rpc_method_handler(
                    servicer.ScanRange,
                    request_deserializer=replica_dot_replication__pb2.RangeRequest.FromString,
                    response_serializer=replica_dot_replication__pb2.RangeResponse.SerializeToString,
            ),
            'FetchUpdates': grpc.unary_unary_rpc_method_handler(
                    servicer.FetchUpdates,
                    request_deserializer=replica_dot_replication__pb2.FetchRequest.FromString,
                    response_serializer=replica_dot_replication__pb2.FetchResponse.SerializeToString,
            ),
            'UpdatePartitionMap': grpc.unary_unary_rpc_method_handler(
                    servicer.UpdatePartitionMap,
                    request_deserializer=replica_dot_replication__pb2.PartitionMap.FromString,
                    response_serializer=replica_dot_replication__pb2.Empty.SerializeToString,
            ),
            'UpdateHashRing': grpc.unary_unary_rpc_method_handler(
                    servicer.UpdateHashRing,
                    request_deserializer=replica_dot_replication__pb2.HashRing.FromString,
                    response_serializer=replica_dot_replication__pb2.Empty.SerializeToString,
            ),
            'ListByIndex': grpc.unary_unary_rpc_method_handler(
                    servicer.ListByIndex,
                    request_deserializer=replica_dot_replication__pb2.IndexQuery.FromString,
                    response_serializer=replica_dot_replication__pb2.KeyList.SerializeToString,
            ),
            'GetNodeInfo': grpc.unary_unary_rpc_method_handler(
                    servicer.GetNodeInfo,
                    request_deserializer=replica_dot_replication__pb2.NodeInfoRequest.FromString,
                    response_serializer=replica_dot_replication__pb2.NodeInfoResponse.SerializeToString,
            ),
            'GetReplicationStatus': grpc.unary_unary_rpc_method_handler(
                    servicer.GetReplicationStatus,
                    request_deserializer=replica_dot_replication__pb2.NodeInfoRequest.FromString,
                    response_serializer=replica_dot_replication__pb2.ReplicationStatusResponse.SerializeToString,
            ),
            'GetWalEntries': grpc.unary_unary_rpc_method_handler(
                    servicer.GetWalEntries,
                    request_deserializer=replica_dot_replication__pb2.NodeInfoRequest.FromString,
                    response_serializer=replica_dot_replication__pb2.WalEntriesResponse.SerializeToString,
            ),
            'GetMemtableEntries': grpc.unary_unary_rpc_method_handler(
                    servicer.GetMemtableEntries,
                    request_deserializer=replica_dot_replication__pb2.NodeInfoRequest.FromString,
                    response_serializer=replica_dot_replication__pb2.StorageEntriesResponse.SerializeToString,
            ),
            'GetSSTables': grpc.unary_unary_rpc_method_handler(
                    servicer.GetSSTables,
                    request_deserializer=replica_dot_replication__pb2.NodeInfoRequest.FromString,
                    response_serializer=replica_dot_replication__pb2.SSTableInfoResponse.SerializeToString,
            ),
            'GetSSTableContent': grpc.unary_unary_rpc_method_handler(
                    servicer.GetSSTableContent,
                    request_deserializer=replica_dot_replication__pb2.SSTableContentRequest.FromString,
                    response_serializer=replica_dot_replication__pb2.StorageEntriesResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'replication.Replica', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('replication.Replica', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class Replica(object):
    """Servico disponibilizado por cada seguidor
    """

    @staticmethod
    def Put(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/replication.Replica/Put',
            replica_dot_replication__pb2.KeyValue.SerializeToString,
            replica_dot_replication__pb2.Empty.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def Delete(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/replication.Replica/Delete',
            replica_dot_replication__pb2.KeyRequest.SerializeToString,
            replica_dot_replication__pb2.Empty.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def Get(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/replication.Replica/Get',
            replica_dot_replication__pb2.KeyRequest.SerializeToString,
            replica_dot_replication__pb2.ValueResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def BeginTransaction(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/replication.Replica/BeginTransaction',
            replica_dot_replication__pb2.Empty.SerializeToString,
            replica_dot_replication__pb2.TransactionId.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def CommitTransaction(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/replication.Replica/CommitTransaction',
            replica_dot_replication__pb2.TransactionControl.SerializeToString,
            replica_dot_replication__pb2.Empty.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def AbortTransaction(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/replication.Replica/AbortTransaction',
            replica_dot_replication__pb2.TransactionControl.SerializeToString,
            replica_dot_replication__pb2.Empty.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ScanRange(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/replication.Replica/ScanRange',
            replica_dot_replication__pb2.RangeRequest.SerializeToString,
            replica_dot_replication__pb2.RangeResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def FetchUpdates(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/replication.Replica/FetchUpdates',
            replica_dot_replication__pb2.FetchRequest.SerializeToString,
            replica_dot_replication__pb2.FetchResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def UpdatePartitionMap(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/replication.Replica/UpdatePartitionMap',
            replica_dot_replication__pb2.PartitionMap.SerializeToString,
            replica_dot_replication__pb2.Empty.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def UpdateHashRing(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/replication.Replica/UpdateHashRing',
            replica_dot_replication__pb2.HashRing.SerializeToString,
            replica_dot_replication__pb2.Empty.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ListByIndex(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/replication.Replica/ListByIndex',
            replica_dot_replication__pb2.IndexQuery.SerializeToString,
            replica_dot_replication__pb2.KeyList.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetNodeInfo(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/replication.Replica/GetNodeInfo',
            replica_dot_replication__pb2.NodeInfoRequest.SerializeToString,
            replica_dot_replication__pb2.NodeInfoResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetReplicationStatus(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/replication.Replica/GetReplicationStatus',
            replica_dot_replication__pb2.NodeInfoRequest.SerializeToString,
            replica_dot_replication__pb2.ReplicationStatusResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetWalEntries(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/replication.Replica/GetWalEntries',
            replica_dot_replication__pb2.NodeInfoRequest.SerializeToString,
            replica_dot_replication__pb2.WalEntriesResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetMemtableEntries(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/replication.Replica/GetMemtableEntries',
            replica_dot_replication__pb2.NodeInfoRequest.SerializeToString,
            replica_dot_replication__pb2.StorageEntriesResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetSSTables(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/replication.Replica/GetSSTables',
            replica_dot_replication__pb2.NodeInfoRequest.SerializeToString,
            replica_dot_replication__pb2.SSTableInfoResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetSSTableContent(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/replication.Replica/GetSSTableContent',
            replica_dot_replication__pb2.SSTableContentRequest.SerializeToString,
            replica_dot_replication__pb2.StorageEntriesResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)


class HeartbeatServiceStub(object):
    """Servico dedicado para heartbeat
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Ping = channel.unary_unary(
                '/replication.HeartbeatService/Ping',
                request_serializer=replica_dot_replication__pb2.Heartbeat.SerializeToString,
                response_deserializer=replica_dot_replication__pb2.Empty.FromString,
                _registered_method=True)


class HeartbeatServiceServicer(object):
    """Servico dedicado para heartbeat
    """

    def Ping(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_HeartbeatServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Ping': grpc.unary_unary_rpc_method_handler(
                    servicer.Ping,
                    request_deserializer=replica_dot_replication__pb2.Heartbeat.FromString,
                    response_serializer=replica_dot_replication__pb2.Empty.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'replication.HeartbeatService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('replication.HeartbeatService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class HeartbeatService(object):
    """Servico dedicado para heartbeat
    """

    @staticmethod
    def Ping(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/replication.HeartbeatService/Ping',
            replica_dot_replication__pb2.Heartbeat.SerializeToString,
            replica_dot_replication__pb2.Empty.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
